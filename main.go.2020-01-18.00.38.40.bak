package main

import (
	"database/sql"
	"fmt"
	// "io/ioutil"
	"log"
    "net/http"
    "strings"

	// Import for the side effect on database/sql
	_ "github.com/mattn/go-sqlite3"

	"github.com/rakyll/statik/fs"
	migrate "github.com/rubenv/sql-migrate"

	_ "github.com/bbkane/hello_statik/statik" // TODO: Replace with the absolute import path
)

// https://github.com/rubenv/sql-migrate/blob/06338513c2375c000ad94f050dce5ee2a5bdcdc6/migrate.go#L230
func findMigrations(dir http.FileSystem) error {


	file, err := dir.Open("/")
	if err != nil {
		return err
	}

	files, err := file.Readdir(0)
	if err != nil {
		return err
	}

    // THis returns an empty list
    // https://github.com/rakyll/statik/blob/74b078749dc19d4fead4faf52bf8f2b88b9e7a74/fs/fs.go#L164
    fmt.Printf("readdir: %v\n", files)

	for _, info := range files {
        fmt.Printf("Looking at %v\n", info)
		if strings.HasSuffix(info.Name(), ".sql") {
            fmt.Printf("Found %v\n", info)
			if err != nil {
				return err
			}

		}
	}

    return nil
}

func main() {

	statikFS, err := fs.New()
	if err != nil {
		log.Fatal(err)
	}

	// {
	// 	// Access individual files by their paths.
	// 	r, err := statikFS.Open("/2019_10_12.1.sql")
	// 	if err != nil {
	// 		log.Fatal(err)
	// 	}
	// 	defer r.Close()
	// 	contents, err := ioutil.ReadAll(r)
	// 	if err != nil {
	// 		log.Fatal(err)
	// 	}
	// 	fmt.Println(string(contents))
	// }

    err = findMigrations(statikFS)
	if err != nil {
		log.Fatal(err)
	}

	migrationSource := &migrate.HttpFileSystemMigrationSource{
		FileSystem: statikFS,
	}

    migrationList, err := migrationSource.FindMigrations()
	if err != nil {
		log.Fatal(err)
	}
    fmt.Printf("migrationList: %v\n", migrationList)

	db, err := sql.Open("sqlite3", "db.db")
	if err != nil {
		log.Fatalf("%v\n", err)
	}

	n, err := migrate.Exec(db, "sqlite3", migrationSource, migrate.Up)
	if err != nil {
		log.Fatalf("%v\n", err)
	}
	fmt.Printf("Applied %d migrations!\n", n)
}
